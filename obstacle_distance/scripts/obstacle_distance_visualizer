#!/usr/bin/env python3
import rclpy
from rclpy.node import Node

# from sensor_msgs.msg import Image
from obstacle_distance_msgs.msg import ObstacleDistance
from nav_msgs.msg import OccupancyGrid
from cv_bridge import CvBridge

import matplotlib.pyplot as plt


class ImageDisplayNode(Node):
    def __init__(self):
        super().__init__("image_display_node")
        self.occupancy_grid_subscription = self.create_subscription(
            OccupancyGrid,
            "obstacle_distance_occGrid",
            self.display_occupancy_grid,
            10,
        )
        self.obstacle_distance_subscription = self.create_subscription(
            ObstacleDistance,
            "obstacle_distance",
            self.display_obstacle_distance,
            10,
        )
        self.bridge = CvBridge()
        self.occ_colorbar = None
        self.dist_colorbar = None
        # plt.ion()  # Interactive mode on
        self.figure, self.ax = plt.subplots(1, 3, figsize=(5, 5))
        self.ax[0].set_title("Occupancy Grid")
        self.ax[1].set_title("Obstacle Distance")
        self.ax[0].set_xlabel("X")
        self.ax[0].set_ylabel("Y")
        self.ax[1].set_xlabel("X")
        self.ax[1].set_ylabel("Y")
        plt.ion()  # Enable interactive mode for real-time updates

    def display_occupancy_grid(self, msg):
        grid_data = msg.data
        width = msg.info.width
        height = msg.info.height
        occupancy_grid = [
            [grid_data[i * width + j] for j in range(width)] for i in range(height)
        ]
        if self.occ_colorbar:
            self.occ_colorbar.remove()
        self.ax[0].cla()  # Clear the first subplot
        im1 = self.ax[0].imshow(occupancy_grid, cmap="gray", origin="lower")
        # add a colorbar to the occupancy grid
        self.ax[0].set_title("Occupancy Grid")
        self.ax[0].set_aspect("equal")
        self.ax[0].grid(True, which="both", color="gray", linestyle="--", linewidth=0.5)
        self.ax[0].set_xlim(-0.5, width - 0.5)
        self.ax[0].set_ylim(-0.5, height - 0.5)
        self.occ_colorbar = self.figure.colorbar(im1, ax=self.ax[0], label="Occupancy")
        # update the plot
        self.figure.canvas.draw()
        self.figure.canvas.flush_events()

    def display_obstacle_distance(self, msg):
        distances = msg.distances
        indexes = msg.indexes
        width = msg.info.width
        height = msg.info.height
        if self.dist_colorbar:
            self.dist_colorbar.remove()
        if len(distances) != width * height:
            self.get_logger().warn("Mismatch in obstacle distance dimensions")
            return

        obstacle_distance_grid = [
            [distances[i * width + j] for j in range(width)] for i in range(height)
        ]

        self.ax[1].cla()
        im2 = self.ax[1].imshow(obstacle_distance_grid, cmap="hot", origin="lower")
        self.ax[1].set_title("Obstacle Distance")
        self.ax[1].set_aspect("equal")
        self.ax[1].grid(True, which="both", color="gray", linestyle="--", linewidth=0.5)
        self.ax[1].set_xlim(-0.5, width - 0.5)
        self.ax[1].set_ylim(-0.5, height - 0.5)
        self.dist_colorbar = self.figure.colorbar(
            im2, ax=self.ax[1], label="Distance (m)"
        )

        self.ax[2].cla()  # Clear the third subplot
        self.ax[2].set_title("Obstacle Indexes")
        self.ax[2].scatter(
            [index % width for index in indexes],
            [index // width for index in indexes],
            c="blue",
            marker="o",
            label="Obstacle Indexes",
        )
        self.ax[2].set_xlabel("X")
        self.ax[2].set_ylabel("Y")
        # update the plot
        self.figure.canvas.draw()
        self.figure.canvas.flush_events()


# This script visualizes occupancy grid and obstacle distance data in real-time using Matplotlib.
# It subscribes to the relevant topics and updates the plots accordingly.
# The occupancy grid is displayed in grayscale, while the obstacle distance is shown in a heatmap style.
def main(args=None):
    rclpy.init(args=args)
    node = ImageDisplayNode()
    plt.tight_layout()
    plt.show(block=False)
    try:
        plt.ioff()
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.destroy_node()
        rclpy.shutdown()
        plt.close()


if __name__ == "__main__":
    main()
